// Require the "https" module to make secure HTTP requests. This is another standard
// Node module.
//
const https = require('https');
const { getBody, makeQuery, redirectTo, sendJSON, setCookie } = require('./utilities');
const { config : { github } } = require('./config');

// In response to a GET request to "/oauth", this function puts together a query string
// containing the necessary credentials to authorize via the authorization server and
// then redirects the client to that server for authorization.
//
exports.authorize = (req, res) => {

  // Create an object containing the credentials required for authorization.
  //
  const credentials = {
    client_id : github.credentials.clientId,
    redirect_uri : github.credentials.redirectUri
  };

  // Convert the credentials into a URL query string and tack the string onto the
  // authorize endpoint creating a complete URL string for authorization.
  //
  const urlStr = `${github.authorizeEndpoint}?${makeQuery(credentials)}`;

  // Redirect to the the authorize endpoint.
  //
  redirectTo(res, urlStr);
};

// A GET request to "/oauth/code" is sent by the authorization server (the redirect uri
// sent with the initial request for an auth code) and the authorization server provides
// the authorization code as a single query parameter. In response, we send that code back
// to the authorization server along with the credentials for this app and exchange the
// code for an access token. If we're successful, we'll then return the access token to
// the client in the form of a cookie.
//
// Please note that up until now, all of our HTTP requests have been sent to us from the
// client code. This is the first time we are making an HTTP request from our server to
// another endpoint. Some things to note here:
//
//   1. To make requests, we use the "https" module. This is another standard Node module.
//      We've used the "http" module in our main server file but this one is for secure HTTP
//      requests.
//
//   2. The "request" function that we use below, like many other Node functions, takes in
//      a set of parameters and ends with a callback to be called upon completion of the
//      requests. This callback is NOT an error-first callback though. The callback takes
//      only the single response object. That object can be queried to see if the request
//      was successful or not.
//
//   3. Here we stick with the callback style when calling "request" just to show how the
//      vanilla request works. We could have (and we will in the next sample) make this
//      function work with Promises. See the comments in the next sample.
//
//   4. There are also several popular 3rd party frameworks for making HTTP requests via
//      Node. We'll also look into one of those in a later sample as well.
//
exports.sendToken = (req, res) => {

  // Create a URL object in order to gain access to the query parameters. There should
  // be a query parameter named "code" containing the access code generated by the
  // authorization server.
  //
  const url = new URL(req.url, `http://${req.headers.host}/`);

  // We're going to send a POST request to the authorization server in order to exchange
  // the authorization code for an access token. Create an object containing the options
  // for posting this HTTP request. Note that this is a POST request and also note that
  // the content type in the request must be "application/x-www-form-urlencoded". Also
  // note that we explicitly set a header stating what kind of data we will accept. We
  // do this to make sure that the response comes back in the form of a JSON object.
  //
  const postOptions = {
    method : 'POST',
    headers : { 'Content-Type' : 'application/x-www-form-urlencoded', 'Accept' : 'application/json' }
  };

  // Here we create an object containing all of the parameters required to make this
  // request.
  //
  //   client_id     - the client id we got when we registered this app.
  //   client_secret - the client secret we got when we registered this app.
  //   code          - the authorization code from the authorization server.
  //
  const postData = {
    client_id : github.credentials.clientId,
    client_secret : github.credentials.clientSecret,
    code : url.searchParams.get('code')
  };

  // Call "https.request" to create a request object using the get token endpoint and
  // our post options from above. We also set the function that is to be called upon
  // successful completion of that request.
  //
  // Note that this is the first time we are sending an HTTP request from our server to
  // another service. So far, all of our HTTP requests have been sent from the client using
  // Ajax. Here we use the "https" module (standard NodeJS mode) to send the request.
  //
  // Note that the request isn't sent yet. Only created.
  //
  const postReq = https.request(github.getTokenEndpoint, postOptions, (postRes) => {

    // Just like an incoming request, the response body comes in chunks so we call
    // our utility to wait until the request completes and calls our callback to
    // process the result.
    //
    getBody(postRes)
      .then((body) => {

        // The result of the request will come in the form of a JSON object (as we specified
        // in the request header) so parse that result.
        //
        const obj = JSON.parse(body);

        // For our purposes, the only property we're interested in on the resulting JSON
        // object is the "access_token" property. Here we set the value of the access token
        // as a cookie on the response  (note this is the response that came in from the
        // client and NOT from the post request we sent to the authorization server. With
        // the cookie set, we can send a response that redirects the client back to the main
        // page "/". At that point, the cookie should exist in the document which means the
        // user should see the quotes page.
        //
        setCookie(res, 'movie-quote-token', `${obj.access_token}`);
        redirectTo(res, '/');
      })
      .catch((e) => {
        sendJSON(res, 500, { error : e.message });
      });
  });

  // Convert our post data object into a URL query string and set it on the request. Then
  // call the "end" function which will send the request.
  //
  postReq.write(makeQuery(postData));
  postReq.end();
};
